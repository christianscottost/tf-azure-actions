on:
  push:
    branches:
      - main
  pull_request:

env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO
 
jobs:
 terraform-plan:
   name: "sandbox-infrastructure"
   runs-on: ubuntu-latest
   environment: sandbox
   env:
    ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

   permissions:
    pull-requests: write
    id-token: write
    contents: read
   defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: ./tf/env/global/foundation/

   steps:
    # - name: 'Az CLI login'
    #   uses: azure/login@v1
    #   with:
    #       client-id: ${{ secrets.ARM_CLIENT_ID }}
    #       tenant-id: ${{ secrets.ARM_TENANT_ID }}
    #       subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    - name: Checkout the repository to the runner
      uses: actions/checkout@v2

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.9
    - name: Terraform init
      id: init
      run: terraform init
    - name: Terraform format
      id: fmt
      run: terraform fmt -check
    - name: Terraform validate
      id: validate
      run: terraform validate
    - name: Terraform plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true
  
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`

          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`

          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>



          \`\`\`\n

          ${process.env.PLAN}

          \`\`\`



          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;



          github.rest.issues.createComment({

            issue_number: context.issue.number,

            owner: context.repo.owner,

            repo: context.repo.repo,

            body: output

          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false